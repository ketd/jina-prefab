[project]
name = "hello-world-prefab"
version = "0.1.2"
description = "一个简单的 Hello World 示例预制件，展示如何创建可被 AI 调用的函数"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
keywords = ["ai", "prefab", "template", "hello-world", "example"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# 运行时依赖（会被打包到最终产物中）
# 这个示例预制件不需要额外的依赖
dependencies = []

[project.optional-dependencies]
# 开发和测试依赖（不会被打包）
dev = [
    "pytest>=7.4.0",
    "flake8>=6.1.0",
    "pytest-cov>=4.1.0",
    "pre-commit>=3.5.0",
    "isort>=5.12.0",
    "tomli>=2.0.1; python_version < '3.11'",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

# 确保 prefab-manifest.json 被包含在 wheel 包中
[tool.hatch.build.targets.wheel.force-include]
"prefab-manifest.json" = "prefab-manifest.json"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
pythonpath = ["."]


[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.isort]
profile = "black"
line_length = 120
skip_gitignore = true
known_first_party = ["src"]

[tool.flake8]
max-line-length = 120
extend-ignore = ["E203", "W503"]
exclude = [".git", "__pycache__", ".venv", "build", "dist"]

[dependency-groups]
dev = [
    "isort>=7.0.0",
    "pre-commit>=4.3.0",
    "tomli>=2.3.0",
]
